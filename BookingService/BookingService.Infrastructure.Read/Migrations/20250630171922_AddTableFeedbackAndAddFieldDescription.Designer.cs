// <auto-generated />
using System;
using BookingService.Infrastructure.Read;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingService.Infrastructure.Read.Migrations
{
    [DbContext(typeof(BookingDbContextRead))]
    [Migration("20250630171922_AddTableFeedbackAndAddFieldDescription")]
    partial class AddTableFeedbackAndAddFieldDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingService.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookingId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.BookingSlots", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.HasKey("BookingId", "SlotId");

                    b.HasIndex("SlotId");

                    b.ToTable("BookingSlots", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("FeedbackDay")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("SlotEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("SlotStartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("SlotId");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.BookingSlots", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingSlots")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookingSlots_Booking");

                    b.HasOne("BookingService.Domain.Entities.Slot", "Slot")
                        .WithMany("BookingSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookingSlots_Slot");

                    b.Navigation("Booking");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("BookingService.Domain.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Booking");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingSlots");

                    b.Navigation("Feedback")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Slot", b =>
                {
                    b.Navigation("BookingSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
