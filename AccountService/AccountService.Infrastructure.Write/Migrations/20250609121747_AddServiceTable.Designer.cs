// <auto-generated />
using System;
using AccountService.Infrastructure.Write;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountService.Infrastructure.Write.Migrations
{
    [DbContext(typeof(AccountDbContextWrite))]
    [Migration("20250609121747_AddServiceTable")]
    partial class AddServiceTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountService.Domain.Entity.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutLawyer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("AccountDob")
                        .HasColumnType("date");

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AccountFullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AccountGender")
                        .HasColumnType("int");

                    b.Property<string>("AccountImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AccountPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("AccountRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountTicketRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("AccountUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("AccountService.Domain.Entity.ForgotPassword", b =>
                {
                    b.Property<Guid>("ForgotPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("ForgotPasswordId");

                    b.HasIndex("AccountId");

                    b.ToTable("ForgotPassword", (string)null);
                });

            modelBuilder.Entity("AccountService.Domain.Entity.LawyerSpecificService", b =>
                {
                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.HasKey("LawyerId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("LawyerSpecificService", (string)null);
                });

            modelBuilder.Entity("AccountService.Domain.Entity.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("AccountService.Domain.Entity.ForgotPassword", b =>
                {
                    b.HasOne("AccountService.Domain.Entity.Account", "Account")
                        .WithMany("ForgotPasswords")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForgotPassword_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountService.Domain.Entity.LawyerSpecificService", b =>
                {
                    b.HasOne("AccountService.Domain.Entity.Account", "Account")
                        .WithMany("LawyerSpecificServices")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LawyerSpecificService_Account");

                    b.HasOne("AccountService.Domain.Entity.Service", "Service")
                        .WithMany("LawyerSpecificServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LawyerSpecificService_Service");

                    b.Navigation("Account");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AccountService.Domain.Entity.Account", b =>
                {
                    b.Navigation("ForgotPasswords");

                    b.Navigation("LawyerSpecificServices");
                });

            modelBuilder.Entity("AccountService.Domain.Entity.Service", b =>
                {
                    b.Navigation("LawyerSpecificServices");
                });
#pragma warning restore 612, 618
        }
    }
}
